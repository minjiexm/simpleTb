NDSummary.OnToolTipsLoaded("SystemVerilogClass:network_port",{254:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"NDClassPrototype\" id=\"NDClassPrototype254\"><div class=\"CPEntry TClass Current\"><div class=\"CPModifiers\"><span class=\"SHKeyword\">typedef</span></div><div class=\"CPName\">network_port</div></div></div><div class=\"TTSummary\">The network_port class is a connector.&nbsp; One side will be connected to network layer, The other side should be connected to a uvm_agent which will drive or collect data from DUT.</div></div>",110:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype110\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">function new</span> (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">name,</td></tr><tr><td class=\"PType first\">uvm_component&nbsp;</td><td class=\"PName last\">parent</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Initializes the object.</div></div>",43:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype43\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual function void</span> build_phase (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">uvm_phase&nbsp;</td><td class=\"PName last\">phase</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Standard uvm build_phase function build all inputs and outputs</div></div>",255:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype255\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual</span> task agent_input_process(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">amiq_eth_packet&nbsp;</td><td class=\"PName last\">txn</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">knob function for processing input from agent side</div></div>",45:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype45\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual</span> task network_input_process(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">amiq_eth_packet&nbsp;</td><td class=\"PName last\">txn</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">knob function for processing input from network side</div></div>",111:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype111\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual function</span> uvme_layer_input#(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first last\">amiq_eth_packet</td></tr></table></td><td class=\"PAfterParameters\">) get_ds_input(<span class=\"SHKeyword\">int unsigned</span> port_idx = <span class=\"SHNumber\">0</span>)</td></tr></table></div><div class=\"TTSummary\">Return the downstream uvme_layer_input of giving index</div></div>",112:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype112\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual function</span> uvme_layer_output#(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PName first last\">amiq_eth_packet</td></tr></table></td><td class=\"PAfterParameters\">) get_ds_output(<span class=\"SHKeyword\">int unsigned</span> port_idx = <span class=\"SHNumber\">0</span>)</td></tr></table></div><div class=\"TTSummary\">Return the downstream uvme_layer_output of giving index</div></div>",113:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype113\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual function void</span> connect_to_port(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">network_port&nbsp;</td><td class=\"PName last\">neighbour_port</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Connect two ports\' network side together, this is kind of back to back</div></div>",125:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype125\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual function void</span> get_all_ds_neighours(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">ref</span>&nbsp;</td><td class=\"PType\">network_component&nbsp;</td><td class=\"PName last\">ds_neighbour[$]</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Get all downstream neighbours through internal network_outputs network_switch should implement this function</div></div>",256:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype256\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual</span> task run_phase(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">uvm_phase&nbsp;</td><td class=\"PName last\">phase</td></tr></table></td><td class=\"PAfterParameters\">)</td></tr></table></div><div class=\"TTSummary\">Keep check agent_info_fifo, if received data from DUT. call agent_input_process.</div></div>"});